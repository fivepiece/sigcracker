#!/bin/bc

obase = 16;
ibase = 16;
n1 = FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141;

define mod(a,n){

    if (-a == n){
        return 0;
    }

    if (a < 0){
        return ((a % n) + n);
    }

    return (a % n);
}

define void extended_gcd_api(a, b, n, *ret[]){

    auto s, olds, t, oldt, r, oldr, quotient, prov;
    s = 0; olds = 1;
    t = 1; oldt = 0;
    r = b; oldr = a;

    while (r != 0){
        quotient = oldr / r;
        prov = r;
        r = mod(oldr - mod(quotient*prov,n),n);
        #r = (oldr - (quotient*prov));
        oldr = prov;
        prov = s;
        s = mod(olds - mod(quotient*prov,n),n);
        #s = (olds - (quotient*prov));
        olds = prov;
        prov = t;
        t = mod(oldt - mod(quotient*prov,n),n);
        #t = (oldt - (quotient*prov));
        oldt = prov;
    }
    #ret[0] = olds; ret[1] = oldt; # Bezout coefficients
    #ret[2] = oldr;                # greatest common divisor
    #ret[3] = t;    ret[4] = s;    # quotients by the gcd
    ret[0] = mod(olds,n); ret[1] = mod(oldt,n); # Bezout coefficients
    ret[2] = mod(oldr,n);                       # greatest common divisor
    ret[3] = mod(t,n);    ret[4] = mod(s,n);    # quotients by the gcd
}

define invmod(a, n){

    auto ret[];
    extended_gcd_api(a, n, n, ret[]);
    return ret[0];
}
